getwd()
setwd("C:/Users/TS-X7/Desktop/Проекты/Ситаглиптин/Valid")
library(dmtools)
library(dplyr)
library(openxlsx)
dataset = read.csv("TAB_all_data_03_2020-12-23-132304635.tsv",
sep = "\t",
stringsAsFactors = F)
dataset$X = NULL
colnames(dataset)
obj_lab = lab("SITA, Lab References 2020-12-23.xlsx",
Study.Subject.ID,
AGE_E1_C2,
SEX_E1_C2,
"NORMAL",
"ABNORMAL")
obj_lab = obj_lab %>% check(dataset)
# Полный результкт проверки
all_result = get_result(obj_lab)
write.xlsx(all_result,
"all_result.xlsx")
# корректная оценка результатов
ok_labs <- obj_lab %>% choose_test("ok")
# неверная оценка результатов
mis_labs <- obj_lab %>% choose_test("mis")
# пропущенные значения в оценке
skip_labs <- obj_lab %>% choose_test("skip")
# нет результата и оценки
null_labs <- obj_lab %>% choose_test("null")
getwd()
setwd("C:/Users/TS-X7/Desktop/Проекты/Ситаглиптин/Valid")
library(dmtools)
library(dplyr)
library(openxlsx)
dataset = read.csv("TAB_all_data_03_2020-12-23-132304635.tsv",
sep = "\t",
stringsAsFactors = F)
dataset$X = NULL
########################## Лабораторные анализы ###########################
obj_lab = lab("SITA, Lab References 2020-12-23.xlsx",
Study.Subject.ID,
AGE_E1_C2,
SEX_E1_C2,
"NORMAL",
"ABNORMAL")
obj_lab = obj_lab %>% check(dataset)
# Полный результкт проверки
all_result = get_result(obj_lab)
write.xlsx(all_result,
"all_result.xlsx")
# корректная оценка результатов
labs_corr <- obj_lab %>% choose_test("ok")
# неверная оценка результатов
labs_incorr <- obj_lab %>% choose_test("mis")
# пропущенные значения в оценке
labs_skip <- obj_lab %>% choose_test("skip")
# нет результата и оценки
labs_null <- obj_lab %>% choose_test("null")
View(labs_null)
getwd()
setwd("C:/Users/TS-X7/Desktop/Проекты/Ситаглиптин/Valid")
library(dmtools)
library(dplyr)
library(openxlsx)
dataset = read.csv("TAB_all_data_04_2020-12-24-233642237.tsv",
sep = "\t",
stringsAsFactors = F)
dataset$X = NULL
obj_lab = lab("SITA, Lab References 2020-12-23.xlsx",
Study.Subject.ID,
AGE_E1_C2,
SEX_E1_C2,
"NORMAL",
"ABNORMAL")
obj_lab = obj_lab %>% check(dataset)
# Полный результкт проверки
all_result = get_result(obj_lab)
write.xlsx(all_result,
"all_result.xlsx")
# корректная оценка результатов
labs_corr <- obj_lab %>% choose_test("ok")
# неверная оценка результатов
labs_incorr <- obj_lab %>% choose_test("mis")
# пропущенные значения в оценке
labs_skip <- obj_lab %>% choose_test("skip")
# нет результата и оценки
labs_null <- obj_lab %>% choose_test("null")
################################## Все даты ##################################
all_dates = dataset %>%
select(matches('Study.Sub|DAT'))
colnames(all_dates)
write.csv2(all_dates,
'all_dates.csv',
sep='\t')
write.xlsx(all_dates,
'all_dates.csv')
write.xlsx(all_dates,
'all_dates.xlsx')
################################## Все даты ##################################
all_dates = dataset %>%
select(matches('Study.Sub|SEX|DAT'))
colnames(all_dates)
write.xlsx(all_dates,
'all_dates.xlsx')
write.xlsx(all_dates,
'all_dates.xlsx',
na = '')
write.csv2(all_dates,
'all_dates.csv',
na = '')
getwd()
setwd("C:/Users/TS-X7/Desktop/Проекты/Ситаглиптин/Valid")
library(dmtools)
library(dplyr)
library(openxlsx)
dataset = read.csv("TAB_all_data_04_2020-12-24-233642237.tsv",
sep = "\t",
stringsAsFactors = F)
dataset$X = NULL
all_vit = dataset %>%
select(matches('Study.Sub|VSORRES'))
sapply(all_vit, function(x) summary(x))
subj_way = dataset %>%
select(matches('^DS|^EC|^FP|Study.Sub'))
write.csv2(subj_way,
'subject_way',
na = '')
subj_way = dataset %>%
select(matches('^DS|^EC|^FP|Study.Sub|^AE'))
write.csv2(subj_way,
'subject_way.csv',
na = '')
write.csv2(subj_way,
'subject_way_01.csv',
na = '')
dataset = read.csv("TAB_output_01_2020-12-29-172151200.tsv",
sep = "\t",
stringsAsFactors = F)
dataset$X = NULL
output = write.xlsx(dataset,
'SITA, Output 2020-12-29.xlsx')
write.xlsx(dataset,
'SITA, Output 2020-12-29.xlsx')
dataset = read.csv("TAB_output_01_2020-12-29-172151200.tsv",
sep = "\t",
stringsAsFactors = F)
dataset$X = NULL
write.xlsx(dataset,
'SITA, Output 2020-12-29.xlsx',
na = '')
library(openxlsx)
library(dplyr)
library(ggplot2)
library(reshape2)
library(scales)
library(tsibble)
library(imputeTS)
library(tsoutliers)
library(TTR)
getwd()
setwd("C:/Users/TS-X7/Proj/SARS-CoV-2")
corona_cases = read.xlsx("Data/CoronaDF.xlsx", sheet=1)
corona_tests = read.xlsx("Data/CoronaDF.xlsx", sheet=2)
coronaDF = full_join(corona_cases,
corona_tests,
by="Date") %>%
mutate(TestsPerformed = as.numeric(TestsPerformed),
ConfirmedCases = as.numeric(ConfirmedCases),
Date = as.Date(Date)-1) %>%
arrange(desc(Date))
TestsPerDay = sapply(1:(length(coronaDF$TestsPerformed)-1),
function(i) {
coronaDF$TestsPerformed[[i]] - coronaDF$TestsPerformed[[i+1]]
})
coronaDF = coronaDF %>%
filter(!Date == "2020-03-14") %>%
mutate(TestsPerDay = TestsPerDay,
Rating = ConfirmedCases/TestsPerDay) %>%
filter(TestsPerDay > 0)
coronaDF_filled = coronaDF %>%
as_tsibble() %>%
fill_gaps(.full = TRUE) %>%
mutate(TestsPerDay = na_locf(TestsPerDay),
ConfirmedCases = na_locf(ConfirmedCases))
# Жестоко сглаживаем выбросы
coronaDF_filled[161,5] = coronaDF_filled[160,5]
coronaDF_filled[c(16:18), 5] = (coronaDF_filled[15,5]+coronaDF_filled[19,5])/2
coronaDF_filled %>%
ggplot(aes(Date)) +
geom_line(aes(y=TestsPerDay, color = "TestsPerDay")) +
geom_line(aes(y=ConfirmedCases*10, color = "ConfirmedCases")) +
scale_y_continuous(
# Features of the first axis
name = "TestsPerDay",
labels=comma,
# Add a second axis and specify its features
sec.axis = sec_axis(~./10, name="ConfirmedCases", labels = comma)
) +
scale_x_date(date_labels = "%b", date_breaks = "1 month") +
ggtitle("Тесты на коронавирус")
TestsPerDay_SMA = SMA(coronaDF_filled$TestsPerDay, n=1)
coronaDF_filled$Rating = coronaDF_filled$ConfirmedCases/coronaDF_filled$TestsPerDay
plot.ts(coronaDF_filled$Rating)
plot.ts(SMA(coronaDF_filled$Rating, n=7))
ts = as.ts(TestsPerDay_SMA[c(50:150)])
plot.ts(ts)
TestsPerDay_components = decompose(ts)
